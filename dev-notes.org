* Basic terminology
** Candidate
A candidate is some value which is ultimately returned to the user as
the selected item.  A candidate can be any scalar (number, string,
vector, ...) or a list of values.

** Prompt
The text that user input into the minibuffer.

** Candidates
Vector of all available [[*Candidate][candidates]].

** Candidate index
Index of a particular candidate in the [[*Candidates][candidates]] vector.

Instead of only being a number, it can be a cons or list where the
~car~ is the index and the rest is arbitrary user data.

** Processed candidates
A list of [[*Candidate%20index][candidate indices]] which are eligible for further processing
(display, selection...).  Instead of modifying the candidate list
(which can possibly be static for the entire session) with each input
change, we only change the list of indices.

For example, if we changed the candidate list itself, on cleaning up
the prompt we would need to recompute the candidate list.

This list is passed through the [[*The%20pipeline][pipeline]].

* The pipeline

The main pipeline consists of these steps:

1. Generator or candidate list (exactly one of these must be provided)
2. Matcher
3. Sorter
4. Renderer

Next we describe the inputs and outputs of each stage.

** Candidates
Candidates can be a list or vector of candidates (static), or a
function taking zero arguments which generates a new list or vector of
candidates for each session (can depend on current environment).

When given/created, lists are coerced into vectors.

** Generator
Generator is responsible for generating new set of possible
/candidates/ with each change of the user input (prompt).  Think
/dynamic candidates/.

It is a function of two arguments: the current source and the current sallet state.

The return value is a *vector* of candidates, each candidate can be
either a value or a list of values.

Sallet supports two asynchronous types of sources:

1. Using asynchronous IO (async IO or asyncio from now on).
2. Using =async.el=.

*** async IO
In this case the generator function returns the process which computes
the candidates.  Candidates themselves are updated from the
=process-filter= attached to the process.  In case we need to
prematurely stop the process it is enough to kill the process returned
from the generator (available via =sallet-source-get-process=).

Because the generator has access to the current sallet state and the
source, it can update the candidates dynamically directly on the
source object.
*** async.el
These sources are marked with =async= property set to =t= on the source.
In theory, any synchronous source can be turned into asynchronous one
just by attaching this property.  The asynchrony here is that while
computing the candidate list emacs doesn't block.

This, however, is very experimental so I don't recommend any one
getting into it much

** Matcher
Matcher filters the available candidates and produces [[*Processed%20candidates][processed candidates]].

It is a function with two input arguments: the vector of candidates
and the current state.

The output are processed candidates.

Matchers follow following naming convention:
- if the matcher is a universal matcher (for example, doing subword,
  flx or regexp matching) independent of the source, use
  ~sallet-matcher-NAME~.
- if the matcher is specific to single source, use ~sallet-SOURCE-NAME-matcher~.

*** Filters
Most matchers are implemented in terms of simpler reusable filters.

There is an interface to make these filters composable (they form
something akin to a monad, yay).  Therefore, one matcher can compose
these filters acting in different ways on the source pattern (in
sequence, in parallel), can perform set operations on their results
(must match all, must match some) and so on.

They all have to follow the following interface:

#+BEGIN_SRC elisp
(defun sallet-filter-NAME (candidates indices pattern)
  "CANDIDATES is the vector of candidates.

INDICES are indices with possibly attached metadata (see
terminology).

PATTERN is the string pattern we are matching against
candidates.  Its semantics are left to the match procedure.

Returns filtered list of indices which should be included in
further processing.")
#+END_SRC

It should not be responsibility of a filter to pre-process patterns or
candidates.

However, there are /composite filters/ which group subfilters together
to provide aggregated functionality (like anding or oring them
together, or making filters operate on parts of the pattern).  These
are usually realized as /decorators/ which take a filter and turn it
into another filter by preprocessing any of the parameters before
passing them further.  Some examples include
=sallet-make-tokenized-filter= which runs the underlying filter on each
input token separately and then ands the results, or
=sallet-compose-filters-by-pattern= which composes filters by
dispatching different parts of the pattern to different filters.

*** Predicates
In turn, filters can use /predicates/ to match candidates and update
their index metadata.

It is important to realize that predicates are completely
independent of sources, candidate vectors, patterns, filters... all
they care about is to get two values to compare and one value to
update, that's it.  Filters using predicates can arbitrarily process
the candidate and pattern before passing it in as arguments.

However, in most cases they should not do it and instead just pass the
values directly, as modification of these values is responsibility of
a pre-processing step, not matching/filtering step.

Predicates have this interface:

#+BEGIN_SRC elisp
(defun sallet-predicate-NAME (candidate index pattern)
  "CANDIDATE is the processed candidate.

INDEX is its associated index and user metadata.

PATTERN is a pattern we are matching against.

Returns updated INDEX with optional added metadata or nil if this
candidate should not pass the filter.")
#+END_SRC

** Sorter
Sorter further processes the [[*Processed%20candidates][processed candidates]] by sorting
them---which is the most expected action, but really, arbitrary
transformation is available.

It is a function with two input arguments: the list of processed candidates
and the current state.

The output are processed candidates.

** Renderer
Renders the candidates in the candidate window.

It is a function with two mandatory input arguments: a [[*Candidate][candidate]] and the current state.

Additionally, any extra user data produced by matcher and/or sorter
(that is, the ~cdr~ of this candidate's candidate index) are passed as
an optional third argument.

* Auxiliary
** Process creators
A /process creator/ is a function of one argument, prompt, which is
responsible for starting and returning the process which generates
candidates.  It does not attach any filters or sentinels on it, it
simply starts it and returns.  Other functions are then responsible to
attach filters on this process to add candidates to the source's
candidate vector.

If you need to "store" information in the process creator (such as
root directory of a search or any other state) you can create a
closure with this information bound.  Most sources defined in sallet
use auxiliary functions to create these closures, such as
=sallet-grep-make-process-creator= which takes one argument, the file
name of the file we are grepping, and returns a closure of one
argument, the prompt, with the file name closed over.

Various decorators exist to change behaviour of these process
creators.  First is =sallet-process-creator-first-token-only=, which
only passes the first whitespace-separated token to the decorated
process creator.  If the first token hasn't changed the process is
not needlessly rerun.

This is useful when we want to generate some initial list of
candidates and then further narrow in elisp without the extra overhead
of re-launching possibly slow searches (think about =find(1)= returning
thousands of candidates).

Another decorator is =sallet-process-creator-min-prompt-length=.
This decorator makes sure to only run the process creator if prompt
length is greater than the specified limit.

** Process filters and decorators
Because sallet provides async IO sources and the Emacs async IO is
quite hairy, we provide some auxiliary decorators to deal with output
of processes.

The most basic is the =sallet-process-filter-line-buffering-decorator=
decorator, which buffers input until it can pass an entire line
further to the underlying process filter.

Generally, users define new candidates /linewise/ from the output of a
program.  We call a function which turns a line of output to a
candidate a /processor/.

These in themselves can't modify sources as they should be pure
functions.  To make defining generators simpler we provide another
auxiliary function =sallet-process-filter-linewise-candidate-decorator=
to turn a processor into a candidate generating process filter.  Your
generator than handles the process creation and attaches this process
filter to the process to fill the candidates vector with values.

Even more high level is the function
=sallet-make-generator-linewise-asyncio= which takes a process creator
(a function of one argument---prompt) and a processor and returns a
/generator/ you can directly assign to your source.  This is the way
virtually any linewise async io source can (should) be defined.
